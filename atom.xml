<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iKoo's Dirty life]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://gythialy.github.io/"/>
  <updated>2015-09-10T05:52:16.000Z</updated>
  <id>https://gythialy.github.io/</id>
  
  <author>
    <name><![CDATA[gythialy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="https://gythialy.github.io/hello-world/"/>
    <id>https://gythialy.github.io/hello-world/</id>
    <published>2015-09-10T05:52:16.000Z</published>
    <updated>2015-09-10T05:52:16.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[test]]></title>
    <link href="https://gythialy.github.io/test/"/>
    <id>https://gythialy.github.io/test/</id>
    <published>2015-09-10T02:50:39.000Z</published>
    <updated>2015-09-10T05:52:16.000Z</updated>
    <content type="html"><![CDATA[<p>今天升级 MarkdownPad2 之后，启动的时候，报了一个异常了，查看下代码，原来 2.4.4 在启动的时候增加了一个状态检查。原来的那个<a href="http://ikoo.info/posts/howto-crack-markdownpad2/" target="_blank" rel="external">简单粗暴的方法</a>，没有给 <code>License</code> 赋值，就导致了现在这个问题。</p>
<p><code>Check</code> 的检查如下</p>
<pre><code><span class="comment">// MarkdownPad2.Core.StartupHelper</span>
<span class="function"><span class="keyword">public</span> StartupResult <span class="title">Check</span><span class="params">(<span class="built_in">string</span> key, <span class="built_in">string</span> email)</span>
</span>{
    Mod mod = <span class="keyword">new</span> Mod();
    <span class="keyword">bool</span> flag = <span class="literal">false</span>;
    <span class="keyword">try</span>
    {
        flag = mod.Verify(key, email);
    }
    <span class="keyword">catch</span> (Exception)
    {
    }
    <span class="keyword">if</span> (flag)
    {
        <span class="keyword">this</span>._name = mod.get_Args().get_Name();
        <span class="keyword">this</span>.IsProcessed = <span class="literal">true</span>;
        <span class="keyword">return</span> StartupResult.Mod;
    }
    LicenseEngine licenseEngine = <span class="keyword">new</span> LicenseEngine();
    <span class="keyword">bool</span> flag2 = licenseEngine.VerifyLicense(key, email);
    <span class="keyword">if</span> (flag2)
    {
        <span class="keyword">this</span>._name = licenseEngine.License.Name;
        <span class="keyword">this</span>.IsProcessed = <span class="literal">true</span>;
        <span class="keyword">return</span> StartupResult.Oem;
    }
    <span class="keyword">return</span> StartupResult.None;
}
</code></pre><p>按照前面的处理办法，<code>this.License = this.Decrypt(licenseKey);</code> 这句没有执行，所以<code>License</code> 为空，就会导致 <code>Check</code> 方法出错。</p>
<p>在原来代码上，修改下 <code>Decrypt</code> 方法的处理</p>
<pre><code>var ins = decrypt.Body.Instructions<span class="comment">;</span>
var i = 0<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Nop))<span class="comment">;</span>
i++<span class="comment">;</span>
var t1 = asm.MainModule.Import(typeof(License).GetConstructor(new Type[] { }))<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Newobj, t1))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Stloc_1))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldloc_1))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldstr, "MarkdownPad2 Cracker"))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Callvirt, nameMethod))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Nop))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldloc_1))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldstr, "MarkdownPad2@gmail.com"))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Callvirt, emailMethod))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Nop))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldloc_1))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Stloc_0))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldloc_0))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Stloc_2))<span class="comment">;</span>
i++<span class="comment">;</span>
//            ins.Insert(i, processor.Create(OpCodes.Br_S))<span class="comment">;</span>
//            i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldloc_2))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ret))<span class="comment">;</span>
</code></pre><p>编译出来的代码就是下面这样的</p>
<pre><code><span class="comment">// MarkdownPad2.Licensing.LicenseEngine</span>
<span class="function"><span class="keyword">private</span> License <span class="title">Decrypt</span><span class="params">(<span class="built_in">string</span> payload)</span>
</span>{
    <span class="keyword">return</span> <span class="keyword">new</span> License
    {
        Name = <span class="string">"MarkdownPad2 Cracker"</span>,
        Email = <span class="string">"MarkdownPad2@gmail.com"</span>
    };
}
</code></pre><p><code>VerifyLicense</code> 修改如下</p>
<pre><code>i = 0<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Nop))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldarg_0))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldarg_0))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldarg_1))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Call, decrypt))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Call, setLicense))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Nop))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldarg_0))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldc_I4_1))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Call, process))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Nop))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldc_I4_1))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Stloc_0))<span class="comment">;</span>
i++<span class="comment">;</span>
//            ins.Insert(i, processor.Create(OpCodes.Br_S))<span class="comment">;</span>
//            i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ldloc_0))<span class="comment">;</span>
i++<span class="comment">;</span>
ins.Insert(i, processor.Create(OpCodes.Ret))<span class="comment">;</span>
</code></pre><p>编译出来就是这样</p>
<pre><code>// <span class="type">MarkdownPad2</span>.<span class="type">Licensing</span>.<span class="type">LicenseEngine</span>
public <span class="type">bool</span> <span class="type">VerifyLicense</span>(<span class="type">string</span> licenseKey, <span class="type">string</span> email)
{
    this.<span class="type">License</span> = this.<span class="type">Decrypt</span>(licenseKey);
    this.<span class="type">LicenseProcessed</span> = <span class="literal">true</span>;
    <span class="keyword">return</span> <span class="literal">true</span>;
    <span class="type">bool</span> <span class="literal">result</span>;
    <span class="keyword">try</span>
    {
    }
    catch (<span class="type">FormatException</span> ex)
    {
        <span class="type">LicenseEngine</span>._logger.<span class="type">ErrorException</span>(<span class="string">"Bad license format"</span>, ex);
        <span class="type">MessageBoxHelper</span>.<span class="type">ShowWarningMessageBox</span>(<span class="type">LocalizationProvider</span>.<span class="type">GetLocalizedString</span>(<span class="string">"License_BadFormat"</span>, <span class="literal">false</span>, <span class="string">"MarkdownPadStrings"</span>) + <span class="type">StringUtilities</span>.<span class="type">GetNewLines</span>(<span class="number">2</span>) + <span class="type">LocalizationProvider</span>.<span class="type">GetLocalizedString</span>(<span class="string">"License_PleaseVerify"</span>, <span class="literal">false</span>, <span class="string">"MarkdownPadStrings"</span>), <span class="type">LocalizationProvider</span>.<span class="type">GetLocalizedString</span>(<span class="string">"License_ErrorTitle"</span>, <span class="literal">false</span>, <span class="string">"MarkdownPadStrings"</span>));
        <span class="literal">result</span> = <span class="literal">false</span>;
    }
    catch (<span class="type">OpenSslException</span> ex2)
    {
        <span class="type">LicenseEngine</span>._logger.<span class="type">ErrorException</span>(<span class="string">"Error decrypting license"</span>, ex2);
        <span class="type">MessageBoxHelper</span>.<span class="type">ShowWarningMessageBox</span>(<span class="type">LocalizationProvider</span>.<span class="type">GetLocalizedString</span>(<span class="string">"License_ErrorMessage"</span>, <span class="literal">false</span>, <span class="string">"MarkdownPadStrings"</span>) + <span class="type">StringUtilities</span>.<span class="type">GetNewLines</span>(<span class="number">2</span>) + <span class="type">LocalizationProvider</span>.<span class="type">GetLocalizedString</span>(<span class="string">"License_PleaseVerify"</span>, <span class="literal">false</span>, <span class="string">"MarkdownPadStrings"</span>), <span class="type">LocalizationProvider</span>.<span class="type">GetLocalizedString</span>(<span class="string">"License_ErrorTitle"</span>, <span class="literal">false</span>, <span class="string">"MarkdownPadStrings"</span>));
        <span class="literal">result</span> = <span class="literal">false</span>;
    }
    catch (<span class="type">Exception</span> ex3)
    {
        <span class="type">LicenseEngine</span>._logger.<span class="type">ErrorException</span>(<span class="string">"Error processing license: "</span> + licenseKey, ex3);
        <span class="type">MessageBoxHelper</span>.<span class="type">ShowErrorMessageBox</span>(<span class="type">LocalizationProvider</span>.<span class="type">GetLocalizedString</span>(<span class="string">"License_ErrorMessage"</span>, <span class="literal">false</span>, <span class="string">"MarkdownPadStrings"</span>) + <span class="type">StringUtilities</span>.<span class="type">GetNewLines</span>(<span class="number">2</span>) + <span class="type">LocalizationProvider</span>.<span class="type">GetLocalizedString</span>(<span class="string">"License_PleaseVerify"</span>, <span class="literal">false</span>, <span class="string">"MarkdownPadStrings"</span>), <span class="type">LocalizationProvider</span>.<span class="type">GetLocalizedString</span>(<span class="string">"License_ErrorTitle"</span>, <span class="literal">false</span>, <span class="string">"MarkdownPadStrings"</span>), ex3, <span class="string">""</span>);
        <span class="literal">result</span> = <span class="literal">false</span>;
    }
    <span class="keyword">return</span> <span class="literal">result</span>;
}
</code></pre><p>完整代码如下</p>
<pre><code>internal class <span class="type">Program</span>
{
    private <span class="keyword">static</span> <span class="type">void</span> <span class="type">Main</span>(<span class="type">string</span>[] args)
    {
        <span class="keyword">var</span> name = <span class="string">"MarkdownPad2.exe"</span>;
        <span class="keyword">if</span> (args != null &amp;&amp; args.<span class="type">Length</span> == <span class="number">1</span>)
        {
            name = args[<span class="number">0</span>];
        }

        <span class="keyword">var</span> target = <span class="type">string</span>.<span class="type">Format</span>(<span class="string">"{0}_patch.exe"</span>, name.<span class="type">Substring</span>(<span class="number">0</span>, name.<span class="type">LastIndexOf</span>('.')));
        <span class="keyword">if</span> (<span class="type">File</span>.<span class="type">Exists</span>(target))
        {
            <span class="type">File</span>.<span class="type">Delete</span>(target);
            <span class="type">Debug</span>.<span class="type">WriteLine</span>(<span class="string">"remove "</span> + target);
        }
        <span class="type">File</span>.<span class="type">Copy</span>(name, target);

        <span class="type">Debug</span>.<span class="type">WriteLine</span>(<span class="string">"read assembly from "</span> + target);
        <span class="keyword">var</span> <span class="keyword">asm</span> = <span class="type">AssemblyDefinition</span>.<span class="type">ReadAssembly</span>(target);

        <span class="keyword">const</span> <span class="type">string</span> typeName = <span class="string">"LicenseEngine"</span>;
        <span class="keyword">const</span> <span class="type">string</span> decryptName = <span class="string">"Decrypt"</span>;
        <span class="keyword">const</span> <span class="type">string</span> setLicenseName = <span class="string">"set_License"</span>;
        <span class="keyword">var</span> licenseEngine = <span class="keyword">asm</span>.<span class="type">MainModule</span>.<span class="type">Types</span>.<span class="type">First</span>(<span class="keyword">type</span> =&gt; <span class="keyword">type</span>.<span class="type">Name</span> == typeName);
        <span class="type">Debug</span>.<span class="type">WriteLine</span>(licenseEngine.<span class="type">FullName</span>);

        <span class="keyword">var</span> decrypt = licenseEngine.<span class="type">Methods</span>.<span class="type">First</span>(<span class="keyword">method</span> =&gt; <span class="keyword">method</span>.<span class="type">Name</span> == decryptName);
        <span class="keyword">var</span> setLicense = licenseEngine.<span class="type">Methods</span>.<span class="type">First</span>(<span class="keyword">method</span> =&gt; <span class="keyword">method</span>.<span class="type">Name</span> == setLicenseName);

        <span class="keyword">const</span> <span class="type">string</span> licenseName = <span class="string">"License"</span>;
        <span class="keyword">const</span> <span class="type">string</span> setName = <span class="string">"set_Name"</span>;
        <span class="keyword">const</span> <span class="type">string</span> setEmail = <span class="string">"set_Email"</span>;
        <span class="keyword">var</span> license = <span class="keyword">asm</span>.<span class="type">MainModule</span>.<span class="type">Types</span>.<span class="type">First</span>(<span class="keyword">type</span> =&gt; <span class="keyword">type</span>.<span class="type">Name</span> == licenseName);
        <span class="type">Debug</span>.<span class="type">WriteLine</span>(license.<span class="type">FullName</span>);

        <span class="keyword">var</span> nameMethod = license.<span class="type">Methods</span>.<span class="type">First</span>(<span class="keyword">method</span> =&gt; <span class="keyword">method</span>.<span class="type">Name</span> == setName);
        <span class="type">Debug</span>.<span class="type">WriteLine</span>(<span class="string">"method &gt;&gt;&gt; "</span> + nameMethod.<span class="type">Name</span>);
        <span class="keyword">var</span> emailMethod = license.<span class="type">Methods</span>.<span class="type">First</span>(<span class="keyword">method</span> =&gt; <span class="keyword">method</span>.<span class="type">Name</span> == setEmail);
        <span class="type">Debug</span>.<span class="type">WriteLine</span>(<span class="string">"method &gt;&gt;&gt; "</span> + emailMethod.<span class="type">Name</span>);

        <span class="keyword">var</span> processor = decrypt.<span class="type">Body</span>.<span class="type">GetILProcessor</span>();

        <span class="keyword">var</span> ins = decrypt.<span class="type">Body</span>.<span class="type">Instructions</span>;
        <span class="keyword">var</span> i = <span class="number">0</span>;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Nop</span>));
        i++;
        //            <span class="keyword">var</span> typeRef = new <span class="type">TypeReference</span>(<span class="string">"MarkdownPad2.Licensing"</span>, <span class="string">"License"</span>, <span class="keyword">asm</span>.<span class="type">MainModule</span>, <span class="keyword">asm</span>.<span class="type">MainModule</span>);
        //            <span class="keyword">var</span> licenseRef = <span class="keyword">asm</span>.<span class="type">MainModule</span>.<span class="type">GetTypeReferences</span>().<span class="type">First</span>(reference =&gt; reference.<span class="type">FullName</span> == <span class="string">"MarkdownPad2.Licensing.License"</span>);
        //            <span class="keyword">var</span> t1 = <span class="keyword">asm</span>.<span class="type">MainModule</span>.<span class="type">GetType</span>(<span class="string">"MarkdownPad2.Licensing.License"</span>).<span class="type">GetType</span>().<span class="type">GetConstructor</span>(new <span class="type">Type</span>[] { });
        <span class="keyword">var</span> t1 = <span class="keyword">asm</span>.<span class="type">MainModule</span>.<span class="type">Import</span>(typeof(<span class="type">License</span>).<span class="type">GetConstructor</span>(new <span class="type">Type</span>[] { }));
        //            <span class="keyword">var</span> t1 = <span class="keyword">asm</span>.<span class="type">MainModule</span>.<span class="type">Import</span>(license.<span class="type">GetType</span>().<span class="type">GetConstructor</span>(new <span class="type">Type</span>[] { }));
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Newobj</span>, t1));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Stloc_1</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldloc_1</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldstr</span>, <span class="string">"MarkdownPad2 Cracker"</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Callvirt</span>, nameMethod));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Nop</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldloc_1</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldstr</span>, <span class="string">"MarkdownPad2@gmail.com"</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Callvirt</span>, emailMethod));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Nop</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldloc_1</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Stloc_0</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldloc_0</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Stloc_2</span>));
        i++;
        //            ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Br_S</span>));
        //            i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldloc_2</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ret</span>));

        <span class="keyword">const</span> <span class="type">string</span> verifyName = <span class="string">"VerifyLicense"</span>;
        <span class="keyword">const</span> <span class="type">string</span> processName = <span class="string">"set_LicenseProcessed"</span>;
        <span class="keyword">var</span> licenseType = <span class="keyword">asm</span>.<span class="type">MainModule</span>.<span class="type">Types</span>.<span class="type">First</span>(<span class="keyword">type</span> =&gt; <span class="keyword">type</span>.<span class="type">Name</span> == typeName);
        <span class="type">Debug</span>.<span class="type">WriteLine</span>(licenseType.<span class="type">FullName</span>);
        <span class="keyword">var</span> process = licenseType.<span class="type">Methods</span>.<span class="type">First</span>(<span class="keyword">method</span> =&gt; <span class="keyword">method</span>.<span class="type">Name</span> == processName);
        <span class="keyword">var</span> verify = licenseType.<span class="type">Methods</span>.<span class="type">First</span>(<span class="keyword">method</span> =&gt; <span class="keyword">method</span>.<span class="type">Name</span> == verifyName);

        <span class="type">Debug</span>.<span class="type">WriteLine</span>(<span class="string">"method &gt;&gt;&gt; "</span> + verify.<span class="type">Name</span>);
        processor = verify.<span class="type">Body</span>.<span class="type">GetILProcessor</span>();
        ins = verify.<span class="type">Body</span>.<span class="type">Instructions</span>;
//            ins.<span class="type">Clear</span>();
        i = <span class="number">0</span>;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Nop</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldarg_0</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldarg_0</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldarg_1</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Call</span>, decrypt));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Call</span>, setLicense));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Nop</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldarg_0</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldc_I4_1</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Call</span>, process));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Nop</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldc_I4_1</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Stloc_0</span>));
        i++;
        //            ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Br_S</span>));
        //            i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ldloc_0</span>));
        i++;
        ins.<span class="type">Insert</span>(i, processor.<span class="type">Create</span>(<span class="type">OpCodes</span>.<span class="type">Ret</span>));

        <span class="keyword">asm</span>.<span class="type">Write</span>(target);
    }
}
</code></pre><p>主要注意的是引用了 <code>MarkdownPad2.Licensing.License</code>，需要添加 <code>MarkdownPad2.exe</code>，应该可以直接从 <code>MainModule</code> 中直接加载，没找到相关说明，而且也没太大影响了，所以我就没做。</p>
<p>做完上面的事情之后，就可以以任意用户名和密钥注册。</p>
<p>显示已激活<br><img src="http://i.imgur.com/ENxDftQ.png" alt="激活"></p>
<p>关于<br><img src="http://i.imgur.com/hnkqp9u.png" alt="关于"></p>
<p><code>--EOF--</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天升级 MarkdownPad2 之后，启动的时候，报了一个异常了，查看下代码，原来 2.4.4 在启动的时候增加了一个状态检查。原来的那个<a href="http://ikoo.info/posts/howto-crack-markdownpad2/" target=]]>
    </summary>
    
      <category term="Markdown" scheme="https://gythialy.github.io/tags/Markdown/"/>
    
      <category term="Windows" scheme="https://gythialy.github.io/tags/Windows/"/>
    
  </entry>
  
</feed>
